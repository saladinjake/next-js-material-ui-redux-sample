"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nuka-carousel";
exports.ids = ["vendor-chunks/nuka-carousel"];
exports.modules = {

/***/ "(ssr)/./node_modules/nuka-carousel/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/nuka-carousel/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alignment: () => (/* binding */ Alignment),\n/* harmony export */   Directions: () => (/* binding */ Directions),\n/* harmony export */   NextButton: () => (/* binding */ NextButton),\n/* harmony export */   PagingDots: () => (/* binding */ PagingDots),\n/* harmony export */   Positions: () => (/* binding */ Positions),\n/* harmony export */   PreviousButton: () => (/* binding */ PreviousButton),\n/* harmony export */   ScrollMode: () => (/* binding */ ScrollMode),\n/* harmony export */   \"default\": () => (/* binding */ Carousel)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __pow = Math.pow;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\n// src/carousel.tsx\n\n// src/slide.tsx\n\n// src/hooks/use-slide-intersection-observer.ts\n\nvar useSlideIntersectionObserver = (elementRef, rootRef, callback)=>{\n    const [entry, setEntry] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        callbackRef.current = callback;\n    }, [\n        callback\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const node = elementRef == null ? void 0 : elementRef.current;\n        const root = rootRef == null ? void 0 : rootRef.current;\n        if (!window.IntersectionObserver || !node || !root) return;\n        const observer = new IntersectionObserver((entries)=>{\n            entries.forEach((entry2)=>{\n                setEntry(entry2);\n                callbackRef.current(entry2);\n            });\n        }, {\n            threshold: [\n                0.05,\n                0.95\n            ],\n            root\n        });\n        observer.observe(node);\n        return ()=>observer.disconnect();\n    }, [\n        elementRef,\n        rootRef\n    ]);\n    return entry;\n};\n// src/slide.tsx\n\nvar getSlideWidth = (count, wrapAround)=>`${wrapAround ? 100 / (3 * count) : 100 / count}%`;\nvar getSlideStyles = (count, isCurrentSlide, isVisibleSlide, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth)=>{\n    const width = slideWidth != null ? slideWidth : getSlideWidth(count, wrapAround);\n    const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n    const animationSpeed = animation === \"fade\" ? 200 : 500;\n    let height = \"auto\";\n    if (adaptiveHeight) {\n        if (initializedAdaptiveHeight) {\n            height = \"100%\";\n        } else if (isVisibleSlide) {\n            height = \"auto\";\n        } else {\n            height = \"0\";\n        }\n    }\n    return {\n        width,\n        height,\n        padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n        transition: animation ? `${speed || animationSpeed}ms ease 0s` : void 0,\n        transform: animation === \"zoom\" ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})` : void 0,\n        opacity: animation === \"fade\" ? visibleSlideOpacity : 1\n    };\n};\nvar generateIndex = (index, count, typeOfSlide)=>{\n    if (typeOfSlide === \"prev-cloned\") {\n        return index - count;\n    }\n    if (typeOfSlide === \"next-cloned\") {\n        return index + count;\n    }\n    return index;\n};\nvar Slide = ({ count, children, index, isCurrentSlide, typeOfSlide, wrapAround, cellSpacing, slideWidth, animation, speed, zoomScale, onVisibleSlideHeightChange, adaptiveHeight, initializedAdaptiveHeight, updateIOEntry, id, carouselRef, carouselId, tabbed })=>{\n    var _a;\n    const customIndex = wrapAround ? generateIndex(index, count, typeOfSlide) : index;\n    const slideRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry2)=>{\n        updateIOEntry(id, (entry2 == null ? void 0 : entry2.intersectionRatio) >= 0.95);\n    });\n    const isVisible = !!(entry == null ? void 0 : entry.isIntersecting);\n    const isFullyVisible = ((_a = entry == null ? void 0 : entry.intersectionRatio) != null ? _a : 1) >= 0.95;\n    const prevIsVisibleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a2;\n        const node = slideRef.current;\n        if (node) {\n            const slideHeight = (_a2 = node.getBoundingClientRect()) == null ? void 0 : _a2.height;\n            const prevIsVisible = prevIsVisibleRef.current;\n            if (isVisible && !prevIsVisible) {\n                onVisibleSlideHeightChange(customIndex, slideHeight);\n            } else if (!isVisible && prevIsVisible) {\n                onVisibleSlideHeightChange(customIndex, null);\n            }\n            prevIsVisibleRef.current = isVisible;\n        }\n    }, [\n        customIndex,\n        isVisible,\n        onVisibleSlideHeightChange\n    ]);\n    const currentSlideClass = isCurrentSlide && isFullyVisible ? \" slide-current\" : \"\";\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", __spreadProps(__spreadValues({\n        ref: slideRef\n    }, {\n        inert: isFullyVisible ? void 0 : \"true\"\n    }), {\n        className: `slide${currentSlideClass}${typeOfSlide ? ` ${typeOfSlide}` : \"\"}${isFullyVisible ? \" slide-visible\" : \"\"}`,\n        style: getSlideStyles(count, isCurrentSlide, isFullyVisible, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth),\n        id: typeOfSlide ? void 0 : `${carouselId}-slide-${index + 1}`,\n        role: tabbed ? \"tabpanel\" : \"group\",\n        \"aria-roledescription\": tabbed ? void 0 : \"slide\",\n        children\n    }));\n};\nvar slide_default = Slide;\n// src/announce-slide.tsx\n\nvar styles = {\n    position: \"absolute\",\n    width: \"1px\",\n    height: \"1px\",\n    overflow: \"hidden\",\n    padding: 0,\n    margin: \"-1px\",\n    clip: \"rect(0, 0, 0, 0)\",\n    whiteSpace: \"nowrap\",\n    border: 0\n};\nvar AnnounceSlide = ({ message, ariaLive = \"polite\" })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        \"aria-live\": ariaLive,\n        \"aria-atomic\": \"true\",\n        style: styles,\n        tabIndex: -1,\n        children: message\n    });\nvar defaultRenderAnnounceSlideMessage = ({ currentSlide, count })=>`Slide ${currentSlide + 1} of ${count}`;\nvar announce_slide_default = AnnounceSlide;\n// src/slider-list.tsx\n\n// src/default-controls.tsx\n\n// src/types.ts\nvar Alignment = /* @__PURE__ */ ((Alignment2)=>{\n    Alignment2[\"Center\"] = \"center\";\n    Alignment2[\"Right\"] = \"right\";\n    Alignment2[\"Left\"] = \"left\";\n    return Alignment2;\n})(Alignment || {});\nvar Directions = /* @__PURE__ */ ((Directions2)=>{\n    Directions2[\"Next\"] = \"next\";\n    Directions2[\"Prev\"] = \"prev\";\n    Directions2[\"Up\"] = \"up\";\n    Directions2[\"Down\"] = \"down\";\n    return Directions2;\n})(Directions || {});\nvar Positions = /* @__PURE__ */ ((Positions2)=>{\n    Positions2[\"TopLeft\"] = \"TopLeft\";\n    Positions2[\"TopCenter\"] = \"TopCenter\";\n    Positions2[\"TopRight\"] = \"TopRight\";\n    Positions2[\"CenterLeft\"] = \"CenterLeft\";\n    Positions2[\"CenterCenter\"] = \"CenterCenter\";\n    Positions2[\"CenterRight\"] = \"CenterRight\";\n    Positions2[\"BottomLeft\"] = \"BottomLeft\";\n    Positions2[\"BottomCenter\"] = \"BottomCenter\";\n    Positions2[\"BottomRight\"] = \"BottomRight\";\n    return Positions2;\n})(Positions || {});\nvar ScrollMode = /* @__PURE__ */ ((ScrollMode2)=>{\n    ScrollMode2[\"page\"] = \"page\";\n    ScrollMode2[\"remainder\"] = \"remainder\";\n    return ScrollMode2;\n})(ScrollMode || {});\n// src/utils.ts\nvar getNextMoveIndex = (scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign)=>{\n    if (wrapAround) {\n        return currentSlide + slidesToScroll;\n    }\n    if (currentSlide >= slideCount - 1 || cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n        return currentSlide;\n    }\n    if (scrollMode === \"remainder\" /* remainder */  && cellAlign === \"left\") {\n        return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n    }\n    return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\nvar getPrevMoveIndex = (scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign)=>{\n    if (wrapAround) {\n        return currentSlide - slidesToScroll;\n    }\n    if (currentSlide <= 0 || cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n        return currentSlide;\n    }\n    if (scrollMode === \"remainder\" /* remainder */  && cellAlign === \"right\") {\n        return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n    }\n    return Math.max(currentSlide - slidesToScroll, 0);\n};\nvar getDefaultSlideIndex = (slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode)=>{\n    if (slideIndex !== void 0) {\n        return slideIndex;\n    }\n    const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, false, cellAlign);\n    return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\nvar getBoundedIndex = (rawIndex, slideCount)=>{\n    return (rawIndex % slideCount + slideCount) % slideCount;\n};\n// src/default-controls.tsx\n\nvar defaultButtonStyles = (disabled)=>({\n        border: 0,\n        background: \"rgba(0,0,0,0.4)\",\n        color: \"white\",\n        padding: 10,\n        textTransform: \"uppercase\",\n        opacity: disabled ? 0.3 : 1,\n        cursor: disabled ? \"not-allowed\" : \"pointer\"\n    });\nvar prevButtonDisabled = ({ cellAlign, currentSlide, slidesToShow, wrapAround })=>{\n    if (wrapAround) {\n        return false;\n    }\n    if (currentSlide === 0) {\n        return true;\n    }\n    if (cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n        return true;\n    }\n    return false;\n};\nvar PreviousButton = ({ previousSlide, defaultControlsConfig: { prevButtonClassName, prevButtonStyle = {}, prevButtonText, prevButtonOnClick }, onUserNavigation, carouselId, previousDisabled: disabled })=>{\n    const handleClick = (event)=>{\n        prevButtonOnClick == null ? void 0 : prevButtonOnClick(event);\n        if (event.defaultPrevented) return;\n        onUserNavigation(event);\n        event.preventDefault();\n        previousSlide();\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n        className: prevButtonClassName,\n        style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), prevButtonStyle),\n        disabled,\n        onClick: handleClick,\n        \"aria-label\": \"previous\",\n        \"aria-controls\": `${carouselId}-slider-frame`,\n        type: \"button\",\n        children: prevButtonText || \"Prev\"\n    });\n};\nvar nextButtonDisabled = ({ cellAlign, currentSlide, slideCount, slidesToShow, wrapAround })=>{\n    if (wrapAround) {\n        return false;\n    }\n    if (currentSlide >= slideCount - 1) {\n        return true;\n    }\n    if (cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n        return true;\n    }\n    return false;\n};\nvar NextButton = ({ nextSlide, defaultControlsConfig: { nextButtonClassName, nextButtonStyle = {}, nextButtonText, nextButtonOnClick }, carouselId, nextDisabled: disabled, onUserNavigation })=>{\n    const handleClick = (event)=>{\n        nextButtonOnClick == null ? void 0 : nextButtonOnClick(event);\n        if (event.defaultPrevented) return;\n        onUserNavigation(event);\n        event.preventDefault();\n        nextSlide();\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n        className: nextButtonClassName,\n        style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), nextButtonStyle),\n        disabled,\n        onClick: handleClick,\n        \"aria-label\": \"next\",\n        \"aria-controls\": `${carouselId}-slider-frame`,\n        type: \"button\",\n        children: nextButtonText || \"Next\"\n    });\n};\nvar getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign)=>{\n    const dotIndexes = [];\n    const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n    if (wrapAround) {\n        for(let i = 0; i < slideCount; i += scrollSlides){\n            dotIndexes.push(i);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === \"center\") {\n        for(let i = 0; i < slideCount - 1; i += scrollSlides){\n            dotIndexes.push(i);\n        }\n        if (slideCount > 0) {\n            dotIndexes.push(slideCount - 1);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === \"left\") {\n        if (slidesToShow >= slideCount) {\n            return [\n                0\n            ];\n        }\n        const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n        for(let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides){\n            dotIndexes.push(i);\n        }\n        if (scrollMode === \"remainder\" /* remainder */ ) {\n            dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n        } else {\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === \"right\") {\n        if (slidesToShow >= slideCount) {\n            return [\n                slideCount - 1\n            ];\n        }\n        const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n        if (scrollMode === \"remainder\" /* remainder */ ) {\n            for(let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides){\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(slideCount - 1);\n        } else {\n            for(let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides){\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n            dotIndexes.reverse();\n        }\n        return dotIndexes;\n    }\n    return dotIndexes;\n};\nvar PagingDots = ({ pagingDotsIndices, defaultControlsConfig: { pagingDotsContainerClassName, pagingDotsClassName, pagingDotsStyle = {}, pagingDotsOnClick }, carouselId, currentSlide, onUserNavigation, slideCount, goToSlide, tabbed })=>{\n    const listStyles = {\n        position: \"relative\",\n        top: -10,\n        display: \"flex\",\n        margin: 0,\n        padding: 0,\n        listStyleType: \"none\"\n    };\n    const getButtonStyles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((active)=>({\n            cursor: \"pointer\",\n            opacity: active ? 1 : 0.5,\n            background: \"transparent\",\n            border: \"none\",\n            fill: \"black\"\n        }), []);\n    const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n    if (!tabbed) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        className: pagingDotsContainerClassName,\n        style: listStyles,\n        role: \"tablist\",\n        \"aria-label\": \"Choose slide to display.\",\n        children: pagingDotsIndices.map((slideIndex, i)=>{\n            const isActive = currentSlideBounded === slideIndex || // sets navigation dots active if the current slide falls in the current index range\n            currentSlideBounded < slideIndex && (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]);\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n                className: [\n                    \"paging-item\",\n                    pagingDotsClassName,\n                    isActive ? \"active\" : null\n                ].join(\" \"),\n                type: \"button\",\n                style: __spreadValues(__spreadValues({}, getButtonStyles(isActive)), pagingDotsStyle),\n                onClick: (event)=>{\n                    pagingDotsOnClick == null ? void 0 : pagingDotsOnClick(event);\n                    if (event.defaultPrevented) return;\n                    onUserNavigation(event);\n                    goToSlide(slideIndex);\n                },\n                \"aria-label\": `slide ${slideIndex + 1}`,\n                \"aria-selected\": isActive,\n                \"aria-controls\": `${carouselId}-slide-${slideIndex + 1}`,\n                role: \"tab\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"svg\", {\n                    className: \"paging-dot\",\n                    width: \"6\",\n                    height: \"6\",\n                    \"aria-hidden\": \"true\",\n                    focusable: \"false\",\n                    viewBox: \"0 0 6 6\",\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"circle\", {\n                        cx: \"3\",\n                        cy: \"3\",\n                        r: \"3\"\n                    })\n                })\n            }, slideIndex);\n        })\n    });\n};\n// src/hooks/use-tween.ts\n\nvar useTween = (durationMs, easingFunction, navigationNum, shouldInterrupt)=>{\n    const [normalizedTimeRaw, setNormalizedTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const startTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Date.now());\n    const rAF = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const isFirstRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const lastNavigationNum = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const normalizedTime = lastNavigationNum.current === null || lastNavigationNum.current === navigationNum || shouldInterrupt ? normalizedTimeRaw : 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        lastNavigationNum.current = navigationNum;\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        if (shouldInterrupt) {\n            return;\n        }\n        startTime.current = Date.now();\n        setNormalizedTime(0);\n        const tick = ()=>{\n            rAF.current = requestAnimationFrame(()=>{\n                const currentTime = Date.now();\n                const normalizedTime2 = Math.min(1, (currentTime - startTime.current) / durationMs);\n                setNormalizedTime(normalizedTime2);\n                if (normalizedTime2 < 1) {\n                    tick();\n                } else {\n                    rAF.current = void 0;\n                }\n            });\n        };\n        tick();\n        return ()=>{\n            if (rAF.current !== void 0) {\n                cancelAnimationFrame(rAF.current);\n                setNormalizedTime(1);\n            }\n        };\n    }, [\n        navigationNum,\n        durationMs,\n        shouldInterrupt\n    ]);\n    return {\n        isAnimating: normalizedTime !== 1,\n        value: easingFunction(normalizedTime)\n    };\n};\n// src/slider-list.tsx\n\nvar getPercentOffsetForSlide = (currentSlide, slideCount, slidesToShow, cellAlign, wrapAround)=>{\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n    const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n    let slide0Offset = wrapAround ? -100 / 3 : 0;\n    if (cellAlign === \"right\" && slidesToShow > 1) {\n        const excessSlides = slidesToShow - 1;\n        slide0Offset += singleSlidePercentOfWhole * excessSlides;\n    }\n    if (cellAlign === \"center\" && slidesToShow > 1) {\n        const excessSlides = slidesToShow - 1;\n        const excessLeftSlides = excessSlides / 2;\n        slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n    }\n    const currentSlideOffsetFrom0 = 100 / renderedSlideCount * currentSlide;\n    return slide0Offset - currentSlideOffsetFrom0;\n};\nvar SliderList = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ animation, animationDistance, cellAlign, children, currentSlide, disableAnimation, disableEdgeSwiping, draggedOffset, easing, edgeEasing, isDragging, scrollMode, slideCount, slidesToScroll, slidesToShow, speed, wrapAround, slideWidth, setIsAnimating }, forwardedRef)=>{\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n    const listVisibleWidth = slideWidth ? `calc(${slideWidth} * ${renderedSlideCount})` : `${renderedSlideCount * 100 / slidesToShow}%`;\n    const percentOffsetForSlideProps = [\n        slideCount,\n        slidesToShow,\n        cellAlign,\n        wrapAround\n    ];\n    const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n        const clampOffsets = [\n            dotIndexes[0],\n            dotIndexes[dotIndexes.length - 1]\n        ].map((index)=>getPercentOffsetForSlide(index, ...percentOffsetForSlideProps));\n        clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n    const slideBasedOffset = getPercentOffsetForSlide(currentSlide, ...percentOffsetForSlideProps);\n    const isEdgeEasing = !disableEdgeSwiping && !wrapAround && (currentSlide === dotIndexes[0] && animationDistance < 0 || currentSlide === dotIndexes[dotIndexes.length - 1] && animationDistance > 0);\n    const { value: transition, isAnimating } = useTween(speed, !isEdgeEasing ? easing : edgeEasing, // animationDistance is assumed to be unique enough that it can be used to\n    // detect when a new animation should start. This is used in addition to\n    // currentSlide because some animations, such as those with edgeEasing, do\n    // not occur due to a change in value of currentSlide\n    currentSlide + animationDistance, isDragging || disableAnimation || animation === \"fade\");\n    let positioning;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n        if (isDragging) {\n            positioning = `translateX(${clampedDraggedOffset})`;\n        } else {\n            const transitionOffset = isAnimating ? (1 - transition) * animationDistance : 0;\n            positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setIsAnimating(isAnimating);\n    }, [\n        isAnimating,\n        setIsAnimating\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        ref: forwardedRef,\n        className: \"slider-list\",\n        style: {\n            width: listVisibleWidth,\n            textAlign: \"left\",\n            userSelect: \"auto\",\n            transform: positioning,\n            display: \"flex\"\n        },\n        children\n    });\n});\nSliderList.displayName = \"SliderList\";\n// src/controls.tsx\n\n// src/control-styles.ts\nvar commonStyles = {\n    position: \"absolute\",\n    display: \"flex\",\n    zIndex: 1,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n};\nvar getControlContainerFlexStyles = (pos)=>{\n    let alignItems;\n    switch(pos){\n        case \"TopLeft\" /* TopLeft */ :\n        case \"TopCenter\" /* TopCenter */ :\n        case \"TopRight\" /* TopRight */ :\n            alignItems = \"flex-start\";\n            break;\n        case \"CenterLeft\" /* CenterLeft */ :\n        case \"CenterCenter\" /* CenterCenter */ :\n        case \"CenterRight\" /* CenterRight */ :\n            alignItems = \"center\";\n            break;\n        case \"BottomLeft\" /* BottomLeft */ :\n        case \"BottomCenter\" /* BottomCenter */ :\n        case \"BottomRight\" /* BottomRight */ :\n            alignItems = \"flex-end\";\n            break;\n    }\n    let justifyContent;\n    switch(pos){\n        case \"TopLeft\" /* TopLeft */ :\n        case \"CenterLeft\" /* CenterLeft */ :\n        case \"BottomLeft\" /* BottomLeft */ :\n            justifyContent = \"flex-start\";\n            break;\n        case \"TopCenter\" /* TopCenter */ :\n        case \"CenterCenter\" /* CenterCenter */ :\n        case \"BottomCenter\" /* BottomCenter */ :\n            justifyContent = \"center\";\n            break;\n        case \"TopRight\" /* TopRight */ :\n        case \"CenterRight\" /* CenterRight */ :\n        case \"BottomRight\" /* BottomRight */ :\n            justifyContent = \"flex-end\";\n            break;\n    }\n    return {\n        alignItems,\n        justifyContent\n    };\n};\nvar getControlContainerStyles = (pos)=>{\n    return __spreadValues(__spreadValues({}, getControlContainerFlexStyles(pos)), commonStyles);\n};\n// src/controls.tsx\n\nvar controlsMap = [\n    {\n        funcName: \"renderTopLeftControls\",\n        key: \"TopLeft\" /* TopLeft */ \n    },\n    {\n        funcName: \"renderTopCenterControls\",\n        key: \"TopCenter\" /* TopCenter */ \n    },\n    {\n        funcName: \"renderTopRightControls\",\n        key: \"TopRight\" /* TopRight */ \n    },\n    {\n        funcName: \"renderCenterLeftControls\",\n        key: \"CenterLeft\" /* CenterLeft */ \n    },\n    {\n        funcName: \"renderCenterCenterControls\",\n        key: \"CenterCenter\" /* CenterCenter */ \n    },\n    {\n        funcName: \"renderCenterRightControls\",\n        key: \"CenterRight\" /* CenterRight */ \n    },\n    {\n        funcName: \"renderBottomLeftControls\",\n        key: \"BottomLeft\" /* BottomLeft */ \n    },\n    {\n        funcName: \"renderBottomCenterControls\",\n        key: \"BottomCenter\" /* BottomCenter */ \n    },\n    {\n        funcName: \"renderBottomRightControls\",\n        key: \"BottomRight\" /* BottomRight */ \n    }\n];\nvar renderControls = (props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll)=>{\n    if (props.withoutControls) {\n        return null;\n    }\n    const disableCheckProps = __spreadProps(__spreadValues({}, props), {\n        currentSlide,\n        slideCount\n    });\n    const nextDisabled = nextButtonDisabled(disableCheckProps);\n    const previousDisabled = prevButtonDisabled(disableCheckProps);\n    const pagingDotsIndices = getDotIndexes(slideCount, slidesToScroll, props.scrollMode, props.slidesToShow, props.wrapAround, props.cellAlign);\n    return controlsMap.map((control)=>{\n        var _a;\n        if (!props[control.funcName] || typeof props[control.funcName] !== \"function\") {\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, control.funcName);\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n            style: __spreadProps(__spreadValues({}, getControlContainerStyles(control.key)), {\n                pointerEvents: \"none\"\n            }),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                className: [\n                    `slider-control-${control.key.toLowerCase()}`,\n                    props.defaultControlsConfig.containerClassName || \"\"\n                ].join(\" \").trim(),\n                style: {\n                    pointerEvents: \"auto\"\n                },\n                children: (_a = props[control.funcName]) == null ? void 0 : _a.call(props, {\n                    cellAlign: props.cellAlign,\n                    cellSpacing: props.cellSpacing,\n                    currentSlide,\n                    defaultControlsConfig: props.defaultControlsConfig || {},\n                    carouselId: props.carouselId,\n                    pagingDotsIndices,\n                    goToSlide,\n                    nextDisabled,\n                    nextSlide,\n                    onUserNavigation: props.onUserNavigation,\n                    previousDisabled,\n                    previousSlide: prevSlide,\n                    scrollMode: props.scrollMode,\n                    slideCount,\n                    slidesToScroll,\n                    slidesToShow: props.slidesToShow || 1,\n                    tabbed: props.tabbed,\n                    vertical: props.vertical,\n                    wrapAround: props.wrapAround\n                })\n            })\n        }, control.funcName);\n    });\n};\nvar controls_default = renderControls;\n// src/default-carousel-props.tsx\n\nvar easeOut = (t)=>__pow(t - 1, 3) + 1;\nvar defaultProps = {\n    adaptiveHeight: false,\n    adaptiveHeightAnimation: true,\n    afterSlide: ()=>{},\n    autoplay: false,\n    autoplayInterval: 3e3,\n    autoplayReverse: false,\n    beforeSlide: ()=>{},\n    cellAlign: \"left\",\n    cellSpacing: 0,\n    defaultControlsConfig: {},\n    disableAnimation: false,\n    disableEdgeSwiping: false,\n    dragging: true,\n    dragThreshold: 0.5,\n    easing: easeOut,\n    edgeEasing: easeOut,\n    enableKeyboardControls: false,\n    frameAriaLabel: \"Slider\",\n    keyCodeConfig: {\n        nextSlide: [\n            39,\n            68,\n            38,\n            87\n        ],\n        previousSlide: [\n            37,\n            65,\n            40,\n            83\n        ],\n        firstSlide: [\n            81\n        ],\n        lastSlide: [\n            69\n        ],\n        pause: [\n            32\n        ]\n    },\n    landmark: false,\n    onDragStart: ()=>{},\n    onDrag: ()=>{},\n    onDragEnd: ()=>{},\n    onUserNavigation: ()=>{},\n    pauseOnHover: true,\n    renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n    renderBottomCenterControls: (props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PagingDots, __spreadValues({}, props)),\n    renderCenterLeftControls: (props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreviousButton, __spreadValues({}, props)),\n    renderCenterRightControls: (props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NextButton, __spreadValues({}, props)),\n    scrollMode: \"page\" /* page */ ,\n    slidesToScroll: 1,\n    slidesToShow: 1,\n    speed: 500,\n    style: {},\n    swiping: true,\n    tabbed: true,\n    vertical: false,\n    withoutControls: false,\n    wrapAround: false,\n    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {})\n};\nvar default_carousel_props_default = defaultProps;\n// src/hooks/use-frame-height.ts\n\n// src/hooks/use-state-with-ref.ts\n\nvar useStateWithRef = (initialState)=>{\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialState);\n    const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialState);\n    const setValueAndRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newValue)=>{\n        valueRef.current = newValue;\n        setValue(newValue);\n    }, []);\n    return [\n        value,\n        setValueAndRef,\n        valueRef\n    ];\n};\n// src/hooks/use-frame-height.ts\nvar useFrameHeight = (adaptiveHeight, slidesToShow, slideCount)=>{\n    const [visibleHeights, setVisibleHeights, visibleHeightsRef] = useStateWithRef([]);\n    const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const handleVisibleSlideHeightChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((slideIndex, height)=>{\n        const latestVisibleHeights = visibleHeightsRef.current;\n        let newVisibleHeights;\n        if (height === null) {\n            newVisibleHeights = latestVisibleHeights.filter((slideHeight)=>slideHeight.slideIndex !== slideIndex);\n        } else {\n            newVisibleHeights = [\n                ...latestVisibleHeights,\n                {\n                    slideIndex,\n                    height\n                }\n            ];\n        }\n        setVisibleHeights(newVisibleHeights);\n        if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n            setInitializedAdaptiveHeight(true);\n        }\n    }, [\n        slideCount,\n        setVisibleHeights,\n        slidesToShow,\n        visibleHeightsRef\n    ]);\n    const frameHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (adaptiveHeight) {\n            if (!initializedAdaptiveHeight) {\n                return \"auto\";\n            }\n            const maxHeight = Math.max(0, ...visibleHeights.map((height)=>height.height));\n            return `${maxHeight}px`;\n        } else {\n            return \"auto\";\n        }\n    }, [\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        visibleHeights\n    ]);\n    return {\n        handleVisibleSlideHeightChange,\n        frameHeight,\n        initializedAdaptiveHeight\n    };\n};\n// src/hooks/use-forward-ref.ts\n\nvar useForwardRef = (ref)=>{\n    const targetRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ref) return;\n        if (typeof ref === \"function\") {\n            ref(targetRef.current);\n        } else {\n            ref.current = targetRef.current;\n        }\n    }, [\n        ref\n    ]);\n    return targetRef;\n};\n// src/carousel.tsx\n\nvar Carousel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((rawProps, ref)=>{\n    const props = rawProps;\n    const internalCarouselId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const { adaptiveHeight, adaptiveHeightAnimation, afterSlide, animation, autoplay, autoplayInterval, autoplayReverse, beforeSlide, carouselId = internalCarouselId, cellAlign: propsCellAlign, cellSpacing, children, className, disableAnimation, dragging: desktopDraggingEnabled, dragThreshold: propsDragThreshold, enableKeyboardControls, frameAriaLabel, keyCodeConfig, landmark, onDrag, onDragEnd, onDragStart, onUserNavigation, pauseOnHover, renderAnnounceSlideMessage, scrollMode: propsScrollMode, slideIndex, slidesToScroll: propsSlidesToScroll, slidesToShow: propsSlidesToShow, slideWidth, speed, style, swiping: mobileDraggingEnabled, tabbed, wrapAround, zoomScale } = props;\n    const filteredSlides = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children).filter(Boolean);\n    const slideCount = filteredSlides.length;\n    const cellAlign = slideWidth || propsSlidesToScroll === \"auto\" ? \"left\" : propsCellAlign;\n    const scrollMode = propsSlidesToScroll === \"auto\" ? \"remainder\" /* remainder */  : propsScrollMode;\n    const [slideIOEntries, setSlideIOEntries] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(/* @__PURE__ */ new Map());\n    const visibleCount = Array.from(slideIOEntries).filter(([, visible])=>visible).length;\n    const [constantVisibleCount, setConstantVisibleCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visibleCount);\n    const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n    const slidesToScroll = animation === \"fade\" ? slidesToShow : propsSlidesToScroll === \"auto\" ? Math.max(constantVisibleCount, 1) : propsSlidesToScroll;\n    const [currentSlide, setCurrentSlide] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>getDefaultSlideIndex(slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode));\n    const [pause, setPause] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [dragDistance, setDragDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [animationDistance, setAnimationDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const updateSlideIOEntry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, isFullyVisible)=>{\n        if (!!slideIOEntries.get(id) === isFullyVisible) return;\n        setSlideIOEntries((prev)=>{\n            const newMap = new Map(prev);\n            newMap.set(id, isFullyVisible);\n            return newMap;\n        });\n    }, [\n        slideIOEntries\n    ]);\n    const prevDragged = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isDragging) prevDragged.current = true;\n        if (!(isDragging || isAnimating)) {\n            if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n            prevDragged.current = false;\n        }\n    }, [\n        isAnimating,\n        isDragging,\n        visibleCount\n    ]);\n    const prevXPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const preDragOffset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const sliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const defaultCarouselRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const autoplayTimeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const autoplayLastTriggeredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const setSliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((node)=>{\n        if (node) {\n            node.querySelectorAll(\".slider-list img\").forEach((el)=>el.setAttribute(\"draggable\", \"false\"));\n        }\n        sliderListRef.current = node;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    const forwardedRef = useForwardRef(ref);\n    const carouselRef = forwardedRef || defaultCarouselRef;\n    const goToSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((targetSlideUnbounded)=>{\n        if (!sliderListRef.current || !carouselRef.current) return;\n        const targetSlideBounded = getBoundedIndex(targetSlideUnbounded, slideCount);\n        const slideChanged = targetSlideUnbounded !== currentSlide;\n        slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n        const currentOffset = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        const sliderWidth = sliderListRef.current.offsetWidth;\n        let targetOffset = getPercentOffsetForSlide(targetSlideBounded, slideCount, slidesToShow, cellAlign, wrapAround) / 100 * sliderWidth;\n        if (wrapAround) {\n            const slideSetWidth = sliderWidth / 3;\n            if (targetSlideUnbounded < 0) {\n                targetOffset += slideSetWidth;\n            }\n            if (targetSlideUnbounded >= slideCount) {\n                targetOffset -= slideSetWidth;\n            }\n        }\n        setAnimationDistance(targetOffset - currentOffset);\n        if (slideChanged) {\n            setCurrentSlide(targetSlideBounded);\n            const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n            setTimeout(()=>{\n                if (!isMounted.current) return;\n                afterSlide(targetSlideBounded);\n            }, msToEndOfAnimation);\n        }\n    }, [\n        afterSlide,\n        beforeSlide,\n        carouselRef,\n        cellAlign,\n        currentSlide,\n        disableAnimation,\n        speed,\n        slideCount,\n        slidesToShow,\n        wrapAround\n    ]);\n    const nextSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign);\n        if (currentSlide !== nextSlideIndex) {\n            goToSlide(nextSlideIndex);\n        }\n    }, [\n        cellAlign,\n        currentSlide,\n        goToSlide,\n        slidesToScroll,\n        scrollMode,\n        slideCount,\n        slidesToShow,\n        wrapAround\n    ]);\n    const prevSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const prevSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign);\n        if (currentSlide !== prevSlideIndex) {\n            goToSlide(prevSlideIndex);\n        }\n    }, [\n        cellAlign,\n        currentSlide,\n        goToSlide,\n        slidesToScroll,\n        scrollMode,\n        slidesToShow,\n        wrapAround\n    ]);\n    const prevMovedToSlideIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(slideIndex);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (slideIndex !== void 0 && slideIndex !== prevMovedToSlideIndex.current && !autoplayReverse) {\n            goToSlide(slideIndex);\n            prevMovedToSlideIndex.current = slideIndex;\n        }\n    }, [\n        slideIndex,\n        autoplayReverse,\n        goToSlide\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let pauseStarted = null;\n        if (pause) {\n            pauseStarted = Date.now();\n        }\n        return ()=>{\n            if (pauseStarted !== null && autoplayLastTriggeredRef.current !== null) {\n                autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n            }\n        };\n    }, [\n        pause\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoplay && !pause) {\n            const adjustedTimeoutMs = autoplayLastTriggeredRef.current !== null ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current) : autoplayInterval;\n            autoplayTimeout.current = setTimeout(()=>{\n                autoplayLastTriggeredRef.current = Date.now();\n                if (autoplayReverse) {\n                    prevSlide();\n                } else {\n                    nextSlide();\n                }\n            }, adjustedTimeoutMs);\n        }\n        if (autoplay && pause) {\n            clearTimeout(autoplayTimeout.current);\n        }\n        return ()=>{\n            clearTimeout(autoplayTimeout.current);\n        };\n    }, [\n        pause,\n        autoplay,\n        autoplayInterval,\n        autoplayReverse,\n        prevSlide,\n        nextSlide\n    ]);\n    const onKeyDown = (event)=>{\n        let keyCommand = null;\n        Object.keys(keyCodeConfig).forEach((command)=>{\n            var _a;\n            if ((_a = keyCodeConfig[command]) == null ? void 0 : _a.includes(event.keyCode)) {\n                keyCommand = command;\n            }\n        });\n        if (keyCommand === null) return;\n        event.preventDefault();\n        event.stopPropagation();\n        switch(keyCommand){\n            case \"nextSlide\":\n                onUserNavigation(event);\n                nextSlide();\n                break;\n            case \"previousSlide\":\n                onUserNavigation(event);\n                prevSlide();\n                break;\n            case \"firstSlide\":\n            case \"lastSlide\":\n                {\n                    onUserNavigation(event);\n                    const dotIndices = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n                    if (keyCommand === \"firstSlide\") {\n                        goToSlide(dotIndices[0]);\n                    } else {\n                        goToSlide(dotIndices[dotIndices.length - 1]);\n                    }\n                    break;\n                }\n            case \"pause\":\n                setPause((p)=>!p);\n                break;\n        }\n    };\n    const dragPositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const handleDragEnd = (e)=>{\n        if (!isDragging || !carouselRef.current) return;\n        setIsDragging(false);\n        let distanceFromInertia = 0;\n        if (dragPositions.current.length > 1) {\n            const startMove = dragPositions.current[0];\n            const endMove = dragPositions.current[dragPositions.current.length - 1];\n            const timeOffset = endMove.time - startMove.time;\n            const goodInertiaFeelConstant = 9;\n            const goodFrictionFeelConstant = 0.92;\n            const initialVelocity = goodInertiaFeelConstant * Math.abs((endMove.pos - startMove.pos) / timeOffset);\n            let velocity = initialVelocity;\n            while(Math.abs(velocity) > 1){\n                distanceFromInertia += velocity;\n                velocity *= goodFrictionFeelConstant;\n            }\n        }\n        dragPositions.current = [];\n        const adjustedDragDistance = Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n        onDragEnd(e);\n        prevXPosition.current = null;\n        setDragDistance(0);\n        const oneScrollWidth = carouselRef.current.offsetWidth * Math.min(1, slidesToScroll / slidesToShow);\n        const dragThreshold = oneScrollWidth * propsDragThreshold;\n        if (adjustedDragDistance < dragThreshold) {\n            goToSlide(currentSlide);\n            return;\n        }\n        const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n        const timesToMove = canMaintainVisualContinuity ? 1 + Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth) : 1;\n        let nextSlideIndex = currentSlide;\n        for(let index = 0; index < timesToMove; index += 1){\n            if (dragDistance > 0) {\n                nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, nextSlideIndex, slideCount, slidesToScroll, slidesToShow, cellAlign);\n            } else {\n                nextSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, nextSlideIndex, slidesToScroll, slidesToShow, cellAlign);\n            }\n        }\n        if (nextSlideIndex !== currentSlide) {\n            onUserNavigation(e);\n        }\n        goToSlide(nextSlideIndex);\n    };\n    const onTouchStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!mobileDraggingEnabled || !sliderListRef.current || !carouselRef.current) {\n            return;\n        }\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n    }, [\n        carouselRef,\n        onDragStart,\n        mobileDraggingEnabled\n    ]);\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((xPosition)=>{\n        if (!isDragging) return;\n        const isFirstMove = prevXPosition.current === null;\n        const delta = prevXPosition.current !== null ? xPosition - prevXPosition.current : 0;\n        const nextDragDistance = dragDistance + delta;\n        const now = Date.now();\n        while(dragPositions.current.length > 0){\n            if (now - dragPositions.current[0].time <= 100) {\n                break;\n            }\n            dragPositions.current.shift();\n        }\n        dragPositions.current.push({\n            pos: nextDragDistance,\n            time: now\n        });\n        if (!isFirstMove) {\n            setDragDistance(nextDragDistance);\n        }\n        prevXPosition.current = xPosition;\n    }, [\n        isDragging,\n        dragDistance\n    ]);\n    const onTouchMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!isDragging || !carouselRef.current) return;\n        onDragStart(e);\n        const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n        handlePointerMove(moveValue);\n    }, [\n        isDragging,\n        carouselRef,\n        handlePointerMove,\n        onDragStart\n    ]);\n    const onMouseDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!desktopDraggingEnabled || !sliderListRef.current || !carouselRef.current) return;\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n    }, [\n        carouselRef,\n        desktopDraggingEnabled,\n        onDragStart\n    ]);\n    const onMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!isDragging || !carouselRef.current) return;\n        onDrag(e);\n        const offsetX = e.clientX - carouselRef.current.getBoundingClientRect().left;\n        const moveValue = carouselRef.current.offsetWidth - offsetX;\n        handlePointerMove(moveValue);\n    }, [\n        carouselRef,\n        isDragging,\n        handlePointerMove,\n        onDrag\n    ]);\n    const onMouseUp = (e)=>{\n        e.preventDefault();\n        handleDragEnd(e);\n    };\n    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (pauseOnHover) {\n            setPause(true);\n        }\n    }, [\n        pauseOnHover\n    ]);\n    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (pauseOnHover) {\n            setPause(false);\n        }\n    }, [\n        pauseOnHover\n    ]);\n    const { frameHeight, handleVisibleSlideHeightChange, initializedAdaptiveHeight } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n    const renderSlides = (typeOfSlide)=>{\n        const slides = filteredSlides.map((child, index)=>{\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slide_default, {\n                id: `${typeOfSlide}-${index}`,\n                carouselId,\n                count: slideCount,\n                index,\n                isCurrentSlide: currentSlide === index,\n                typeOfSlide,\n                wrapAround,\n                cellSpacing,\n                animation,\n                speed,\n                zoomScale,\n                onVisibleSlideHeightChange: handleVisibleSlideHeightChange,\n                slideWidth,\n                updateIOEntry: updateSlideIOEntry,\n                adaptiveHeight,\n                initializedAdaptiveHeight,\n                carouselRef,\n                tabbed,\n                children: child\n            }, `${typeOfSlide}-${index}`);\n        });\n        return slides;\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"slider-container\",\n        style: {\n            position: \"relative\"\n        },\n        onMouseEnter,\n        onMouseLeave,\n        \"aria-label\": frameAriaLabel,\n        role: landmark ? \"region\" : \"group\",\n        \"aria-roledescription\": \"carousel\",\n        id: carouselId,\n        \"data-testid\": carouselId,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(announce_slide_default, {\n                ariaLive: autoplay && !pause ? \"off\" : \"polite\",\n                message: renderAnnounceSlideMessage({\n                    currentSlide,\n                    count: slideCount\n                })\n            }),\n            controls_default(__spreadProps(__spreadValues({}, props), {\n                carouselId\n            }), slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                className: [\n                    \"slider-frame\",\n                    className || \"\"\n                ].join(\" \").trim(),\n                style: __spreadValues({\n                    overflow: \"hidden\",\n                    width: \"100%\",\n                    position: \"relative\",\n                    outline: \"none\",\n                    touchAction: \"pan-y\",\n                    height: frameHeight,\n                    transition: adaptiveHeightAnimation ? \"height 300ms ease-in-out\" : void 0,\n                    willChange: \"height\",\n                    userSelect: \"none\"\n                }, style),\n                tabIndex: enableKeyboardControls ? 0 : -1,\n                onKeyDown: enableKeyboardControls ? onKeyDown : void 0,\n                ref: carouselRef,\n                onMouseUp,\n                onMouseDown,\n                onMouseMove,\n                onMouseLeave: onMouseUp,\n                onTouchStart,\n                onTouchEnd: handleDragEnd,\n                onTouchMove,\n                id: `${carouselId}-slider-frame`,\n                \"data-testid\": `${carouselId}-slider-frame`,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(SliderList, {\n                    animationDistance,\n                    cellAlign,\n                    currentSlide,\n                    disableEdgeSwiping: props.disableEdgeSwiping,\n                    draggedOffset: preDragOffset.current - dragDistance,\n                    disableAnimation,\n                    easing: props.easing,\n                    edgeEasing: props.edgeEasing,\n                    isDragging,\n                    ref: setSliderListRef,\n                    scrollMode,\n                    animation,\n                    slideCount,\n                    slidesToScroll,\n                    slidesToShow,\n                    speed,\n                    slideWidth,\n                    wrapAround,\n                    setIsAnimating,\n                    children: [\n                        wrapAround ? renderSlides(\"prev-cloned\") : null,\n                        renderSlides(),\n                        wrapAround ? renderSlides(\"next-cloned\") : null\n                    ]\n                })\n            })\n        ]\n    });\n});\nCarousel.defaultProps = default_carousel_props_default;\nCarousel.displayName = \"Carousel\";\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nuka-carousel/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/nuka-carousel/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/nuka-carousel/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alignment: () => (/* binding */ Alignment),\n/* harmony export */   Directions: () => (/* binding */ Directions),\n/* harmony export */   NextButton: () => (/* binding */ NextButton),\n/* harmony export */   PagingDots: () => (/* binding */ PagingDots),\n/* harmony export */   Positions: () => (/* binding */ Positions),\n/* harmony export */   PreviousButton: () => (/* binding */ PreviousButton),\n/* harmony export */   ScrollMode: () => (/* binding */ ScrollMode),\n/* harmony export */   \"default\": () => (/* binding */ Carousel)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __pow = Math.pow;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\n// src/carousel.tsx\n\n// src/slide.tsx\n\n// src/hooks/use-slide-intersection-observer.ts\n\nvar useSlideIntersectionObserver = (elementRef, rootRef, callback)=>{\n    const [entry, setEntry] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        callbackRef.current = callback;\n    }, [\n        callback\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const node = elementRef == null ? void 0 : elementRef.current;\n        const root = rootRef == null ? void 0 : rootRef.current;\n        if (!window.IntersectionObserver || !node || !root) return;\n        const observer = new IntersectionObserver((entries)=>{\n            entries.forEach((entry2)=>{\n                setEntry(entry2);\n                callbackRef.current(entry2);\n            });\n        }, {\n            threshold: [\n                0.05,\n                0.95\n            ],\n            root\n        });\n        observer.observe(node);\n        return ()=>observer.disconnect();\n    }, [\n        elementRef,\n        rootRef\n    ]);\n    return entry;\n};\n// src/slide.tsx\n\nvar getSlideWidth = (count, wrapAround)=>`${wrapAround ? 100 / (3 * count) : 100 / count}%`;\nvar getSlideStyles = (count, isCurrentSlide, isVisibleSlide, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth)=>{\n    const width = slideWidth != null ? slideWidth : getSlideWidth(count, wrapAround);\n    const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n    const animationSpeed = animation === \"fade\" ? 200 : 500;\n    let height = \"auto\";\n    if (adaptiveHeight) {\n        if (initializedAdaptiveHeight) {\n            height = \"100%\";\n        } else if (isVisibleSlide) {\n            height = \"auto\";\n        } else {\n            height = \"0\";\n        }\n    }\n    return {\n        width,\n        height,\n        padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n        transition: animation ? `${speed || animationSpeed}ms ease 0s` : void 0,\n        transform: animation === \"zoom\" ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})` : void 0,\n        opacity: animation === \"fade\" ? visibleSlideOpacity : 1\n    };\n};\nvar generateIndex = (index, count, typeOfSlide)=>{\n    if (typeOfSlide === \"prev-cloned\") {\n        return index - count;\n    }\n    if (typeOfSlide === \"next-cloned\") {\n        return index + count;\n    }\n    return index;\n};\nvar Slide = ({ count, children, index, isCurrentSlide, typeOfSlide, wrapAround, cellSpacing, slideWidth, animation, speed, zoomScale, onVisibleSlideHeightChange, adaptiveHeight, initializedAdaptiveHeight, updateIOEntry, id, carouselRef, carouselId, tabbed })=>{\n    var _a;\n    const customIndex = wrapAround ? generateIndex(index, count, typeOfSlide) : index;\n    const slideRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry2)=>{\n        updateIOEntry(id, (entry2 == null ? void 0 : entry2.intersectionRatio) >= 0.95);\n    });\n    const isVisible = !!(entry == null ? void 0 : entry.isIntersecting);\n    const isFullyVisible = ((_a = entry == null ? void 0 : entry.intersectionRatio) != null ? _a : 1) >= 0.95;\n    const prevIsVisibleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a2;\n        const node = slideRef.current;\n        if (node) {\n            const slideHeight = (_a2 = node.getBoundingClientRect()) == null ? void 0 : _a2.height;\n            const prevIsVisible = prevIsVisibleRef.current;\n            if (isVisible && !prevIsVisible) {\n                onVisibleSlideHeightChange(customIndex, slideHeight);\n            } else if (!isVisible && prevIsVisible) {\n                onVisibleSlideHeightChange(customIndex, null);\n            }\n            prevIsVisibleRef.current = isVisible;\n        }\n    }, [\n        customIndex,\n        isVisible,\n        onVisibleSlideHeightChange\n    ]);\n    const currentSlideClass = isCurrentSlide && isFullyVisible ? \" slide-current\" : \"\";\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", __spreadProps(__spreadValues({\n        ref: slideRef\n    }, {\n        inert: isFullyVisible ? void 0 : \"true\"\n    }), {\n        className: `slide${currentSlideClass}${typeOfSlide ? ` ${typeOfSlide}` : \"\"}${isFullyVisible ? \" slide-visible\" : \"\"}`,\n        style: getSlideStyles(count, isCurrentSlide, isFullyVisible, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth),\n        id: typeOfSlide ? void 0 : `${carouselId}-slide-${index + 1}`,\n        role: tabbed ? \"tabpanel\" : \"group\",\n        \"aria-roledescription\": tabbed ? void 0 : \"slide\",\n        children\n    }));\n};\nvar slide_default = Slide;\n// src/announce-slide.tsx\n\nvar styles = {\n    position: \"absolute\",\n    width: \"1px\",\n    height: \"1px\",\n    overflow: \"hidden\",\n    padding: 0,\n    margin: \"-1px\",\n    clip: \"rect(0, 0, 0, 0)\",\n    whiteSpace: \"nowrap\",\n    border: 0\n};\nvar AnnounceSlide = ({ message, ariaLive = \"polite\" })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        \"aria-live\": ariaLive,\n        \"aria-atomic\": \"true\",\n        style: styles,\n        tabIndex: -1,\n        children: message\n    });\nvar defaultRenderAnnounceSlideMessage = ({ currentSlide, count })=>`Slide ${currentSlide + 1} of ${count}`;\nvar announce_slide_default = AnnounceSlide;\n// src/slider-list.tsx\n\n// src/default-controls.tsx\n\n// src/types.ts\nvar Alignment = /* @__PURE__ */ ((Alignment2)=>{\n    Alignment2[\"Center\"] = \"center\";\n    Alignment2[\"Right\"] = \"right\";\n    Alignment2[\"Left\"] = \"left\";\n    return Alignment2;\n})(Alignment || {});\nvar Directions = /* @__PURE__ */ ((Directions2)=>{\n    Directions2[\"Next\"] = \"next\";\n    Directions2[\"Prev\"] = \"prev\";\n    Directions2[\"Up\"] = \"up\";\n    Directions2[\"Down\"] = \"down\";\n    return Directions2;\n})(Directions || {});\nvar Positions = /* @__PURE__ */ ((Positions2)=>{\n    Positions2[\"TopLeft\"] = \"TopLeft\";\n    Positions2[\"TopCenter\"] = \"TopCenter\";\n    Positions2[\"TopRight\"] = \"TopRight\";\n    Positions2[\"CenterLeft\"] = \"CenterLeft\";\n    Positions2[\"CenterCenter\"] = \"CenterCenter\";\n    Positions2[\"CenterRight\"] = \"CenterRight\";\n    Positions2[\"BottomLeft\"] = \"BottomLeft\";\n    Positions2[\"BottomCenter\"] = \"BottomCenter\";\n    Positions2[\"BottomRight\"] = \"BottomRight\";\n    return Positions2;\n})(Positions || {});\nvar ScrollMode = /* @__PURE__ */ ((ScrollMode2)=>{\n    ScrollMode2[\"page\"] = \"page\";\n    ScrollMode2[\"remainder\"] = \"remainder\";\n    return ScrollMode2;\n})(ScrollMode || {});\n// src/utils.ts\nvar getNextMoveIndex = (scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign)=>{\n    if (wrapAround) {\n        return currentSlide + slidesToScroll;\n    }\n    if (currentSlide >= slideCount - 1 || cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n        return currentSlide;\n    }\n    if (scrollMode === \"remainder\" /* remainder */  && cellAlign === \"left\") {\n        return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n    }\n    return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\nvar getPrevMoveIndex = (scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign)=>{\n    if (wrapAround) {\n        return currentSlide - slidesToScroll;\n    }\n    if (currentSlide <= 0 || cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n        return currentSlide;\n    }\n    if (scrollMode === \"remainder\" /* remainder */  && cellAlign === \"right\") {\n        return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n    }\n    return Math.max(currentSlide - slidesToScroll, 0);\n};\nvar getDefaultSlideIndex = (slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode)=>{\n    if (slideIndex !== void 0) {\n        return slideIndex;\n    }\n    const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, false, cellAlign);\n    return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\nvar getBoundedIndex = (rawIndex, slideCount)=>{\n    return (rawIndex % slideCount + slideCount) % slideCount;\n};\n// src/default-controls.tsx\n\nvar defaultButtonStyles = (disabled)=>({\n        border: 0,\n        background: \"rgba(0,0,0,0.4)\",\n        color: \"white\",\n        padding: 10,\n        textTransform: \"uppercase\",\n        opacity: disabled ? 0.3 : 1,\n        cursor: disabled ? \"not-allowed\" : \"pointer\"\n    });\nvar prevButtonDisabled = ({ cellAlign, currentSlide, slidesToShow, wrapAround })=>{\n    if (wrapAround) {\n        return false;\n    }\n    if (currentSlide === 0) {\n        return true;\n    }\n    if (cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n        return true;\n    }\n    return false;\n};\nvar PreviousButton = ({ previousSlide, defaultControlsConfig: { prevButtonClassName, prevButtonStyle = {}, prevButtonText, prevButtonOnClick }, onUserNavigation, carouselId, previousDisabled: disabled })=>{\n    const handleClick = (event)=>{\n        prevButtonOnClick == null ? void 0 : prevButtonOnClick(event);\n        if (event.defaultPrevented) return;\n        onUserNavigation(event);\n        event.preventDefault();\n        previousSlide();\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n        className: prevButtonClassName,\n        style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), prevButtonStyle),\n        disabled,\n        onClick: handleClick,\n        \"aria-label\": \"previous\",\n        \"aria-controls\": `${carouselId}-slider-frame`,\n        type: \"button\",\n        children: prevButtonText || \"Prev\"\n    });\n};\nvar nextButtonDisabled = ({ cellAlign, currentSlide, slideCount, slidesToShow, wrapAround })=>{\n    if (wrapAround) {\n        return false;\n    }\n    if (currentSlide >= slideCount - 1) {\n        return true;\n    }\n    if (cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n        return true;\n    }\n    return false;\n};\nvar NextButton = ({ nextSlide, defaultControlsConfig: { nextButtonClassName, nextButtonStyle = {}, nextButtonText, nextButtonOnClick }, carouselId, nextDisabled: disabled, onUserNavigation })=>{\n    const handleClick = (event)=>{\n        nextButtonOnClick == null ? void 0 : nextButtonOnClick(event);\n        if (event.defaultPrevented) return;\n        onUserNavigation(event);\n        event.preventDefault();\n        nextSlide();\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n        className: nextButtonClassName,\n        style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), nextButtonStyle),\n        disabled,\n        onClick: handleClick,\n        \"aria-label\": \"next\",\n        \"aria-controls\": `${carouselId}-slider-frame`,\n        type: \"button\",\n        children: nextButtonText || \"Next\"\n    });\n};\nvar getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign)=>{\n    const dotIndexes = [];\n    const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n    if (wrapAround) {\n        for(let i = 0; i < slideCount; i += scrollSlides){\n            dotIndexes.push(i);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === \"center\") {\n        for(let i = 0; i < slideCount - 1; i += scrollSlides){\n            dotIndexes.push(i);\n        }\n        if (slideCount > 0) {\n            dotIndexes.push(slideCount - 1);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === \"left\") {\n        if (slidesToShow >= slideCount) {\n            return [\n                0\n            ];\n        }\n        const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n        for(let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides){\n            dotIndexes.push(i);\n        }\n        if (scrollMode === \"remainder\" /* remainder */ ) {\n            dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n        } else {\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === \"right\") {\n        if (slidesToShow >= slideCount) {\n            return [\n                slideCount - 1\n            ];\n        }\n        const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n        if (scrollMode === \"remainder\" /* remainder */ ) {\n            for(let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides){\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(slideCount - 1);\n        } else {\n            for(let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides){\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n            dotIndexes.reverse();\n        }\n        return dotIndexes;\n    }\n    return dotIndexes;\n};\nvar PagingDots = ({ pagingDotsIndices, defaultControlsConfig: { pagingDotsContainerClassName, pagingDotsClassName, pagingDotsStyle = {}, pagingDotsOnClick }, carouselId, currentSlide, onUserNavigation, slideCount, goToSlide, tabbed })=>{\n    const listStyles = {\n        position: \"relative\",\n        top: -10,\n        display: \"flex\",\n        margin: 0,\n        padding: 0,\n        listStyleType: \"none\"\n    };\n    const getButtonStyles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((active)=>({\n            cursor: \"pointer\",\n            opacity: active ? 1 : 0.5,\n            background: \"transparent\",\n            border: \"none\",\n            fill: \"black\"\n        }), []);\n    const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n    if (!tabbed) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        className: pagingDotsContainerClassName,\n        style: listStyles,\n        role: \"tablist\",\n        \"aria-label\": \"Choose slide to display.\",\n        children: pagingDotsIndices.map((slideIndex, i)=>{\n            const isActive = currentSlideBounded === slideIndex || // sets navigation dots active if the current slide falls in the current index range\n            currentSlideBounded < slideIndex && (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]);\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n                className: [\n                    \"paging-item\",\n                    pagingDotsClassName,\n                    isActive ? \"active\" : null\n                ].join(\" \"),\n                type: \"button\",\n                style: __spreadValues(__spreadValues({}, getButtonStyles(isActive)), pagingDotsStyle),\n                onClick: (event)=>{\n                    pagingDotsOnClick == null ? void 0 : pagingDotsOnClick(event);\n                    if (event.defaultPrevented) return;\n                    onUserNavigation(event);\n                    goToSlide(slideIndex);\n                },\n                \"aria-label\": `slide ${slideIndex + 1}`,\n                \"aria-selected\": isActive,\n                \"aria-controls\": `${carouselId}-slide-${slideIndex + 1}`,\n                role: \"tab\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"svg\", {\n                    className: \"paging-dot\",\n                    width: \"6\",\n                    height: \"6\",\n                    \"aria-hidden\": \"true\",\n                    focusable: \"false\",\n                    viewBox: \"0 0 6 6\",\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"circle\", {\n                        cx: \"3\",\n                        cy: \"3\",\n                        r: \"3\"\n                    })\n                })\n            }, slideIndex);\n        })\n    });\n};\n// src/hooks/use-tween.ts\n\nvar useTween = (durationMs, easingFunction, navigationNum, shouldInterrupt)=>{\n    const [normalizedTimeRaw, setNormalizedTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const startTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Date.now());\n    const rAF = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const isFirstRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const lastNavigationNum = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const normalizedTime = lastNavigationNum.current === null || lastNavigationNum.current === navigationNum || shouldInterrupt ? normalizedTimeRaw : 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        lastNavigationNum.current = navigationNum;\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        if (shouldInterrupt) {\n            return;\n        }\n        startTime.current = Date.now();\n        setNormalizedTime(0);\n        const tick = ()=>{\n            rAF.current = requestAnimationFrame(()=>{\n                const currentTime = Date.now();\n                const normalizedTime2 = Math.min(1, (currentTime - startTime.current) / durationMs);\n                setNormalizedTime(normalizedTime2);\n                if (normalizedTime2 < 1) {\n                    tick();\n                } else {\n                    rAF.current = void 0;\n                }\n            });\n        };\n        tick();\n        return ()=>{\n            if (rAF.current !== void 0) {\n                cancelAnimationFrame(rAF.current);\n                setNormalizedTime(1);\n            }\n        };\n    }, [\n        navigationNum,\n        durationMs,\n        shouldInterrupt\n    ]);\n    return {\n        isAnimating: normalizedTime !== 1,\n        value: easingFunction(normalizedTime)\n    };\n};\n// src/slider-list.tsx\n\nvar getPercentOffsetForSlide = (currentSlide, slideCount, slidesToShow, cellAlign, wrapAround)=>{\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n    const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n    let slide0Offset = wrapAround ? -100 / 3 : 0;\n    if (cellAlign === \"right\" && slidesToShow > 1) {\n        const excessSlides = slidesToShow - 1;\n        slide0Offset += singleSlidePercentOfWhole * excessSlides;\n    }\n    if (cellAlign === \"center\" && slidesToShow > 1) {\n        const excessSlides = slidesToShow - 1;\n        const excessLeftSlides = excessSlides / 2;\n        slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n    }\n    const currentSlideOffsetFrom0 = 100 / renderedSlideCount * currentSlide;\n    return slide0Offset - currentSlideOffsetFrom0;\n};\nvar SliderList = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ animation, animationDistance, cellAlign, children, currentSlide, disableAnimation, disableEdgeSwiping, draggedOffset, easing, edgeEasing, isDragging, scrollMode, slideCount, slidesToScroll, slidesToShow, speed, wrapAround, slideWidth, setIsAnimating }, forwardedRef)=>{\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n    const listVisibleWidth = slideWidth ? `calc(${slideWidth} * ${renderedSlideCount})` : `${renderedSlideCount * 100 / slidesToShow}%`;\n    const percentOffsetForSlideProps = [\n        slideCount,\n        slidesToShow,\n        cellAlign,\n        wrapAround\n    ];\n    const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n        const clampOffsets = [\n            dotIndexes[0],\n            dotIndexes[dotIndexes.length - 1]\n        ].map((index)=>getPercentOffsetForSlide(index, ...percentOffsetForSlideProps));\n        clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n    const slideBasedOffset = getPercentOffsetForSlide(currentSlide, ...percentOffsetForSlideProps);\n    const isEdgeEasing = !disableEdgeSwiping && !wrapAround && (currentSlide === dotIndexes[0] && animationDistance < 0 || currentSlide === dotIndexes[dotIndexes.length - 1] && animationDistance > 0);\n    const { value: transition, isAnimating } = useTween(speed, !isEdgeEasing ? easing : edgeEasing, // animationDistance is assumed to be unique enough that it can be used to\n    // detect when a new animation should start. This is used in addition to\n    // currentSlide because some animations, such as those with edgeEasing, do\n    // not occur due to a change in value of currentSlide\n    currentSlide + animationDistance, isDragging || disableAnimation || animation === \"fade\");\n    let positioning;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n        if (isDragging) {\n            positioning = `translateX(${clampedDraggedOffset})`;\n        } else {\n            const transitionOffset = isAnimating ? (1 - transition) * animationDistance : 0;\n            positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setIsAnimating(isAnimating);\n    }, [\n        isAnimating,\n        setIsAnimating\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        ref: forwardedRef,\n        className: \"slider-list\",\n        style: {\n            width: listVisibleWidth,\n            textAlign: \"left\",\n            userSelect: \"auto\",\n            transform: positioning,\n            display: \"flex\"\n        },\n        children\n    });\n});\nSliderList.displayName = \"SliderList\";\n// src/controls.tsx\n\n// src/control-styles.ts\nvar commonStyles = {\n    position: \"absolute\",\n    display: \"flex\",\n    zIndex: 1,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n};\nvar getControlContainerFlexStyles = (pos)=>{\n    let alignItems;\n    switch(pos){\n        case \"TopLeft\" /* TopLeft */ :\n        case \"TopCenter\" /* TopCenter */ :\n        case \"TopRight\" /* TopRight */ :\n            alignItems = \"flex-start\";\n            break;\n        case \"CenterLeft\" /* CenterLeft */ :\n        case \"CenterCenter\" /* CenterCenter */ :\n        case \"CenterRight\" /* CenterRight */ :\n            alignItems = \"center\";\n            break;\n        case \"BottomLeft\" /* BottomLeft */ :\n        case \"BottomCenter\" /* BottomCenter */ :\n        case \"BottomRight\" /* BottomRight */ :\n            alignItems = \"flex-end\";\n            break;\n    }\n    let justifyContent;\n    switch(pos){\n        case \"TopLeft\" /* TopLeft */ :\n        case \"CenterLeft\" /* CenterLeft */ :\n        case \"BottomLeft\" /* BottomLeft */ :\n            justifyContent = \"flex-start\";\n            break;\n        case \"TopCenter\" /* TopCenter */ :\n        case \"CenterCenter\" /* CenterCenter */ :\n        case \"BottomCenter\" /* BottomCenter */ :\n            justifyContent = \"center\";\n            break;\n        case \"TopRight\" /* TopRight */ :\n        case \"CenterRight\" /* CenterRight */ :\n        case \"BottomRight\" /* BottomRight */ :\n            justifyContent = \"flex-end\";\n            break;\n    }\n    return {\n        alignItems,\n        justifyContent\n    };\n};\nvar getControlContainerStyles = (pos)=>{\n    return __spreadValues(__spreadValues({}, getControlContainerFlexStyles(pos)), commonStyles);\n};\n// src/controls.tsx\n\nvar controlsMap = [\n    {\n        funcName: \"renderTopLeftControls\",\n        key: \"TopLeft\" /* TopLeft */ \n    },\n    {\n        funcName: \"renderTopCenterControls\",\n        key: \"TopCenter\" /* TopCenter */ \n    },\n    {\n        funcName: \"renderTopRightControls\",\n        key: \"TopRight\" /* TopRight */ \n    },\n    {\n        funcName: \"renderCenterLeftControls\",\n        key: \"CenterLeft\" /* CenterLeft */ \n    },\n    {\n        funcName: \"renderCenterCenterControls\",\n        key: \"CenterCenter\" /* CenterCenter */ \n    },\n    {\n        funcName: \"renderCenterRightControls\",\n        key: \"CenterRight\" /* CenterRight */ \n    },\n    {\n        funcName: \"renderBottomLeftControls\",\n        key: \"BottomLeft\" /* BottomLeft */ \n    },\n    {\n        funcName: \"renderBottomCenterControls\",\n        key: \"BottomCenter\" /* BottomCenter */ \n    },\n    {\n        funcName: \"renderBottomRightControls\",\n        key: \"BottomRight\" /* BottomRight */ \n    }\n];\nvar renderControls = (props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll)=>{\n    if (props.withoutControls) {\n        return null;\n    }\n    const disableCheckProps = __spreadProps(__spreadValues({}, props), {\n        currentSlide,\n        slideCount\n    });\n    const nextDisabled = nextButtonDisabled(disableCheckProps);\n    const previousDisabled = prevButtonDisabled(disableCheckProps);\n    const pagingDotsIndices = getDotIndexes(slideCount, slidesToScroll, props.scrollMode, props.slidesToShow, props.wrapAround, props.cellAlign);\n    return controlsMap.map((control)=>{\n        var _a;\n        if (!props[control.funcName] || typeof props[control.funcName] !== \"function\") {\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, control.funcName);\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n            style: __spreadProps(__spreadValues({}, getControlContainerStyles(control.key)), {\n                pointerEvents: \"none\"\n            }),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                className: [\n                    `slider-control-${control.key.toLowerCase()}`,\n                    props.defaultControlsConfig.containerClassName || \"\"\n                ].join(\" \").trim(),\n                style: {\n                    pointerEvents: \"auto\"\n                },\n                children: (_a = props[control.funcName]) == null ? void 0 : _a.call(props, {\n                    cellAlign: props.cellAlign,\n                    cellSpacing: props.cellSpacing,\n                    currentSlide,\n                    defaultControlsConfig: props.defaultControlsConfig || {},\n                    carouselId: props.carouselId,\n                    pagingDotsIndices,\n                    goToSlide,\n                    nextDisabled,\n                    nextSlide,\n                    onUserNavigation: props.onUserNavigation,\n                    previousDisabled,\n                    previousSlide: prevSlide,\n                    scrollMode: props.scrollMode,\n                    slideCount,\n                    slidesToScroll,\n                    slidesToShow: props.slidesToShow || 1,\n                    tabbed: props.tabbed,\n                    vertical: props.vertical,\n                    wrapAround: props.wrapAround\n                })\n            })\n        }, control.funcName);\n    });\n};\nvar controls_default = renderControls;\n// src/default-carousel-props.tsx\n\nvar easeOut = (t)=>__pow(t - 1, 3) + 1;\nvar defaultProps = {\n    adaptiveHeight: false,\n    adaptiveHeightAnimation: true,\n    afterSlide: ()=>{},\n    autoplay: false,\n    autoplayInterval: 3e3,\n    autoplayReverse: false,\n    beforeSlide: ()=>{},\n    cellAlign: \"left\",\n    cellSpacing: 0,\n    defaultControlsConfig: {},\n    disableAnimation: false,\n    disableEdgeSwiping: false,\n    dragging: true,\n    dragThreshold: 0.5,\n    easing: easeOut,\n    edgeEasing: easeOut,\n    enableKeyboardControls: false,\n    frameAriaLabel: \"Slider\",\n    keyCodeConfig: {\n        nextSlide: [\n            39,\n            68,\n            38,\n            87\n        ],\n        previousSlide: [\n            37,\n            65,\n            40,\n            83\n        ],\n        firstSlide: [\n            81\n        ],\n        lastSlide: [\n            69\n        ],\n        pause: [\n            32\n        ]\n    },\n    landmark: false,\n    onDragStart: ()=>{},\n    onDrag: ()=>{},\n    onDragEnd: ()=>{},\n    onUserNavigation: ()=>{},\n    pauseOnHover: true,\n    renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n    renderBottomCenterControls: (props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PagingDots, __spreadValues({}, props)),\n    renderCenterLeftControls: (props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreviousButton, __spreadValues({}, props)),\n    renderCenterRightControls: (props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NextButton, __spreadValues({}, props)),\n    scrollMode: \"page\" /* page */ ,\n    slidesToScroll: 1,\n    slidesToShow: 1,\n    speed: 500,\n    style: {},\n    swiping: true,\n    tabbed: true,\n    vertical: false,\n    withoutControls: false,\n    wrapAround: false,\n    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {})\n};\nvar default_carousel_props_default = defaultProps;\n// src/hooks/use-frame-height.ts\n\n// src/hooks/use-state-with-ref.ts\n\nvar useStateWithRef = (initialState)=>{\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialState);\n    const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialState);\n    const setValueAndRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newValue)=>{\n        valueRef.current = newValue;\n        setValue(newValue);\n    }, []);\n    return [\n        value,\n        setValueAndRef,\n        valueRef\n    ];\n};\n// src/hooks/use-frame-height.ts\nvar useFrameHeight = (adaptiveHeight, slidesToShow, slideCount)=>{\n    const [visibleHeights, setVisibleHeights, visibleHeightsRef] = useStateWithRef([]);\n    const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const handleVisibleSlideHeightChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((slideIndex, height)=>{\n        const latestVisibleHeights = visibleHeightsRef.current;\n        let newVisibleHeights;\n        if (height === null) {\n            newVisibleHeights = latestVisibleHeights.filter((slideHeight)=>slideHeight.slideIndex !== slideIndex);\n        } else {\n            newVisibleHeights = [\n                ...latestVisibleHeights,\n                {\n                    slideIndex,\n                    height\n                }\n            ];\n        }\n        setVisibleHeights(newVisibleHeights);\n        if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n            setInitializedAdaptiveHeight(true);\n        }\n    }, [\n        slideCount,\n        setVisibleHeights,\n        slidesToShow,\n        visibleHeightsRef\n    ]);\n    const frameHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (adaptiveHeight) {\n            if (!initializedAdaptiveHeight) {\n                return \"auto\";\n            }\n            const maxHeight = Math.max(0, ...visibleHeights.map((height)=>height.height));\n            return `${maxHeight}px`;\n        } else {\n            return \"auto\";\n        }\n    }, [\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        visibleHeights\n    ]);\n    return {\n        handleVisibleSlideHeightChange,\n        frameHeight,\n        initializedAdaptiveHeight\n    };\n};\n// src/hooks/use-forward-ref.ts\n\nvar useForwardRef = (ref)=>{\n    const targetRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ref) return;\n        if (typeof ref === \"function\") {\n            ref(targetRef.current);\n        } else {\n            ref.current = targetRef.current;\n        }\n    }, [\n        ref\n    ]);\n    return targetRef;\n};\n// src/carousel.tsx\n\nvar Carousel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((rawProps, ref)=>{\n    const props = rawProps;\n    const internalCarouselId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const { adaptiveHeight, adaptiveHeightAnimation, afterSlide, animation, autoplay, autoplayInterval, autoplayReverse, beforeSlide, carouselId = internalCarouselId, cellAlign: propsCellAlign, cellSpacing, children, className, disableAnimation, dragging: desktopDraggingEnabled, dragThreshold: propsDragThreshold, enableKeyboardControls, frameAriaLabel, keyCodeConfig, landmark, onDrag, onDragEnd, onDragStart, onUserNavigation, pauseOnHover, renderAnnounceSlideMessage, scrollMode: propsScrollMode, slideIndex, slidesToScroll: propsSlidesToScroll, slidesToShow: propsSlidesToShow, slideWidth, speed, style, swiping: mobileDraggingEnabled, tabbed, wrapAround, zoomScale } = props;\n    const filteredSlides = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children).filter(Boolean);\n    const slideCount = filteredSlides.length;\n    const cellAlign = slideWidth || propsSlidesToScroll === \"auto\" ? \"left\" : propsCellAlign;\n    const scrollMode = propsSlidesToScroll === \"auto\" ? \"remainder\" /* remainder */  : propsScrollMode;\n    const [slideIOEntries, setSlideIOEntries] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(/* @__PURE__ */ new Map());\n    const visibleCount = Array.from(slideIOEntries).filter(([, visible])=>visible).length;\n    const [constantVisibleCount, setConstantVisibleCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visibleCount);\n    const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n    const slidesToScroll = animation === \"fade\" ? slidesToShow : propsSlidesToScroll === \"auto\" ? Math.max(constantVisibleCount, 1) : propsSlidesToScroll;\n    const [currentSlide, setCurrentSlide] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>getDefaultSlideIndex(slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode));\n    const [pause, setPause] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [dragDistance, setDragDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [animationDistance, setAnimationDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const updateSlideIOEntry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, isFullyVisible)=>{\n        if (!!slideIOEntries.get(id) === isFullyVisible) return;\n        setSlideIOEntries((prev)=>{\n            const newMap = new Map(prev);\n            newMap.set(id, isFullyVisible);\n            return newMap;\n        });\n    }, [\n        slideIOEntries\n    ]);\n    const prevDragged = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isDragging) prevDragged.current = true;\n        if (!(isDragging || isAnimating)) {\n            if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n            prevDragged.current = false;\n        }\n    }, [\n        isAnimating,\n        isDragging,\n        visibleCount\n    ]);\n    const prevXPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const preDragOffset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const sliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const defaultCarouselRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const autoplayTimeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const autoplayLastTriggeredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const setSliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((node)=>{\n        if (node) {\n            node.querySelectorAll(\".slider-list img\").forEach((el)=>el.setAttribute(\"draggable\", \"false\"));\n        }\n        sliderListRef.current = node;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    const forwardedRef = useForwardRef(ref);\n    const carouselRef = forwardedRef || defaultCarouselRef;\n    const goToSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((targetSlideUnbounded)=>{\n        if (!sliderListRef.current || !carouselRef.current) return;\n        const targetSlideBounded = getBoundedIndex(targetSlideUnbounded, slideCount);\n        const slideChanged = targetSlideUnbounded !== currentSlide;\n        slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n        const currentOffset = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        const sliderWidth = sliderListRef.current.offsetWidth;\n        let targetOffset = getPercentOffsetForSlide(targetSlideBounded, slideCount, slidesToShow, cellAlign, wrapAround) / 100 * sliderWidth;\n        if (wrapAround) {\n            const slideSetWidth = sliderWidth / 3;\n            if (targetSlideUnbounded < 0) {\n                targetOffset += slideSetWidth;\n            }\n            if (targetSlideUnbounded >= slideCount) {\n                targetOffset -= slideSetWidth;\n            }\n        }\n        setAnimationDistance(targetOffset - currentOffset);\n        if (slideChanged) {\n            setCurrentSlide(targetSlideBounded);\n            const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n            setTimeout(()=>{\n                if (!isMounted.current) return;\n                afterSlide(targetSlideBounded);\n            }, msToEndOfAnimation);\n        }\n    }, [\n        afterSlide,\n        beforeSlide,\n        carouselRef,\n        cellAlign,\n        currentSlide,\n        disableAnimation,\n        speed,\n        slideCount,\n        slidesToShow,\n        wrapAround\n    ]);\n    const nextSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign);\n        if (currentSlide !== nextSlideIndex) {\n            goToSlide(nextSlideIndex);\n        }\n    }, [\n        cellAlign,\n        currentSlide,\n        goToSlide,\n        slidesToScroll,\n        scrollMode,\n        slideCount,\n        slidesToShow,\n        wrapAround\n    ]);\n    const prevSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const prevSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign);\n        if (currentSlide !== prevSlideIndex) {\n            goToSlide(prevSlideIndex);\n        }\n    }, [\n        cellAlign,\n        currentSlide,\n        goToSlide,\n        slidesToScroll,\n        scrollMode,\n        slidesToShow,\n        wrapAround\n    ]);\n    const prevMovedToSlideIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(slideIndex);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (slideIndex !== void 0 && slideIndex !== prevMovedToSlideIndex.current && !autoplayReverse) {\n            goToSlide(slideIndex);\n            prevMovedToSlideIndex.current = slideIndex;\n        }\n    }, [\n        slideIndex,\n        autoplayReverse,\n        goToSlide\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let pauseStarted = null;\n        if (pause) {\n            pauseStarted = Date.now();\n        }\n        return ()=>{\n            if (pauseStarted !== null && autoplayLastTriggeredRef.current !== null) {\n                autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n            }\n        };\n    }, [\n        pause\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoplay && !pause) {\n            const adjustedTimeoutMs = autoplayLastTriggeredRef.current !== null ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current) : autoplayInterval;\n            autoplayTimeout.current = setTimeout(()=>{\n                autoplayLastTriggeredRef.current = Date.now();\n                if (autoplayReverse) {\n                    prevSlide();\n                } else {\n                    nextSlide();\n                }\n            }, adjustedTimeoutMs);\n        }\n        if (autoplay && pause) {\n            clearTimeout(autoplayTimeout.current);\n        }\n        return ()=>{\n            clearTimeout(autoplayTimeout.current);\n        };\n    }, [\n        pause,\n        autoplay,\n        autoplayInterval,\n        autoplayReverse,\n        prevSlide,\n        nextSlide\n    ]);\n    const onKeyDown = (event)=>{\n        let keyCommand = null;\n        Object.keys(keyCodeConfig).forEach((command)=>{\n            var _a;\n            if ((_a = keyCodeConfig[command]) == null ? void 0 : _a.includes(event.keyCode)) {\n                keyCommand = command;\n            }\n        });\n        if (keyCommand === null) return;\n        event.preventDefault();\n        event.stopPropagation();\n        switch(keyCommand){\n            case \"nextSlide\":\n                onUserNavigation(event);\n                nextSlide();\n                break;\n            case \"previousSlide\":\n                onUserNavigation(event);\n                prevSlide();\n                break;\n            case \"firstSlide\":\n            case \"lastSlide\":\n                {\n                    onUserNavigation(event);\n                    const dotIndices = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n                    if (keyCommand === \"firstSlide\") {\n                        goToSlide(dotIndices[0]);\n                    } else {\n                        goToSlide(dotIndices[dotIndices.length - 1]);\n                    }\n                    break;\n                }\n            case \"pause\":\n                setPause((p)=>!p);\n                break;\n        }\n    };\n    const dragPositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const handleDragEnd = (e)=>{\n        if (!isDragging || !carouselRef.current) return;\n        setIsDragging(false);\n        let distanceFromInertia = 0;\n        if (dragPositions.current.length > 1) {\n            const startMove = dragPositions.current[0];\n            const endMove = dragPositions.current[dragPositions.current.length - 1];\n            const timeOffset = endMove.time - startMove.time;\n            const goodInertiaFeelConstant = 9;\n            const goodFrictionFeelConstant = 0.92;\n            const initialVelocity = goodInertiaFeelConstant * Math.abs((endMove.pos - startMove.pos) / timeOffset);\n            let velocity = initialVelocity;\n            while(Math.abs(velocity) > 1){\n                distanceFromInertia += velocity;\n                velocity *= goodFrictionFeelConstant;\n            }\n        }\n        dragPositions.current = [];\n        const adjustedDragDistance = Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n        onDragEnd(e);\n        prevXPosition.current = null;\n        setDragDistance(0);\n        const oneScrollWidth = carouselRef.current.offsetWidth * Math.min(1, slidesToScroll / slidesToShow);\n        const dragThreshold = oneScrollWidth * propsDragThreshold;\n        if (adjustedDragDistance < dragThreshold) {\n            goToSlide(currentSlide);\n            return;\n        }\n        const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n        const timesToMove = canMaintainVisualContinuity ? 1 + Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth) : 1;\n        let nextSlideIndex = currentSlide;\n        for(let index = 0; index < timesToMove; index += 1){\n            if (dragDistance > 0) {\n                nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, nextSlideIndex, slideCount, slidesToScroll, slidesToShow, cellAlign);\n            } else {\n                nextSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, nextSlideIndex, slidesToScroll, slidesToShow, cellAlign);\n            }\n        }\n        if (nextSlideIndex !== currentSlide) {\n            onUserNavigation(e);\n        }\n        goToSlide(nextSlideIndex);\n    };\n    const onTouchStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!mobileDraggingEnabled || !sliderListRef.current || !carouselRef.current) {\n            return;\n        }\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n    }, [\n        carouselRef,\n        onDragStart,\n        mobileDraggingEnabled\n    ]);\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((xPosition)=>{\n        if (!isDragging) return;\n        const isFirstMove = prevXPosition.current === null;\n        const delta = prevXPosition.current !== null ? xPosition - prevXPosition.current : 0;\n        const nextDragDistance = dragDistance + delta;\n        const now = Date.now();\n        while(dragPositions.current.length > 0){\n            if (now - dragPositions.current[0].time <= 100) {\n                break;\n            }\n            dragPositions.current.shift();\n        }\n        dragPositions.current.push({\n            pos: nextDragDistance,\n            time: now\n        });\n        if (!isFirstMove) {\n            setDragDistance(nextDragDistance);\n        }\n        prevXPosition.current = xPosition;\n    }, [\n        isDragging,\n        dragDistance\n    ]);\n    const onTouchMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!isDragging || !carouselRef.current) return;\n        onDragStart(e);\n        const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n        handlePointerMove(moveValue);\n    }, [\n        isDragging,\n        carouselRef,\n        handlePointerMove,\n        onDragStart\n    ]);\n    const onMouseDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!desktopDraggingEnabled || !sliderListRef.current || !carouselRef.current) return;\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n    }, [\n        carouselRef,\n        desktopDraggingEnabled,\n        onDragStart\n    ]);\n    const onMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!isDragging || !carouselRef.current) return;\n        onDrag(e);\n        const offsetX = e.clientX - carouselRef.current.getBoundingClientRect().left;\n        const moveValue = carouselRef.current.offsetWidth - offsetX;\n        handlePointerMove(moveValue);\n    }, [\n        carouselRef,\n        isDragging,\n        handlePointerMove,\n        onDrag\n    ]);\n    const onMouseUp = (e)=>{\n        e.preventDefault();\n        handleDragEnd(e);\n    };\n    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (pauseOnHover) {\n            setPause(true);\n        }\n    }, [\n        pauseOnHover\n    ]);\n    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (pauseOnHover) {\n            setPause(false);\n        }\n    }, [\n        pauseOnHover\n    ]);\n    const { frameHeight, handleVisibleSlideHeightChange, initializedAdaptiveHeight } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n    const renderSlides = (typeOfSlide)=>{\n        const slides = filteredSlides.map((child, index)=>{\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slide_default, {\n                id: `${typeOfSlide}-${index}`,\n                carouselId,\n                count: slideCount,\n                index,\n                isCurrentSlide: currentSlide === index,\n                typeOfSlide,\n                wrapAround,\n                cellSpacing,\n                animation,\n                speed,\n                zoomScale,\n                onVisibleSlideHeightChange: handleVisibleSlideHeightChange,\n                slideWidth,\n                updateIOEntry: updateSlideIOEntry,\n                adaptiveHeight,\n                initializedAdaptiveHeight,\n                carouselRef,\n                tabbed,\n                children: child\n            }, `${typeOfSlide}-${index}`);\n        });\n        return slides;\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"slider-container\",\n        style: {\n            position: \"relative\"\n        },\n        onMouseEnter,\n        onMouseLeave,\n        \"aria-label\": frameAriaLabel,\n        role: landmark ? \"region\" : \"group\",\n        \"aria-roledescription\": \"carousel\",\n        id: carouselId,\n        \"data-testid\": carouselId,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(announce_slide_default, {\n                ariaLive: autoplay && !pause ? \"off\" : \"polite\",\n                message: renderAnnounceSlideMessage({\n                    currentSlide,\n                    count: slideCount\n                })\n            }),\n            controls_default(__spreadProps(__spreadValues({}, props), {\n                carouselId\n            }), slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                className: [\n                    \"slider-frame\",\n                    className || \"\"\n                ].join(\" \").trim(),\n                style: __spreadValues({\n                    overflow: \"hidden\",\n                    width: \"100%\",\n                    position: \"relative\",\n                    outline: \"none\",\n                    touchAction: \"pan-y\",\n                    height: frameHeight,\n                    transition: adaptiveHeightAnimation ? \"height 300ms ease-in-out\" : void 0,\n                    willChange: \"height\",\n                    userSelect: \"none\"\n                }, style),\n                tabIndex: enableKeyboardControls ? 0 : -1,\n                onKeyDown: enableKeyboardControls ? onKeyDown : void 0,\n                ref: carouselRef,\n                onMouseUp,\n                onMouseDown,\n                onMouseMove,\n                onMouseLeave: onMouseUp,\n                onTouchStart,\n                onTouchEnd: handleDragEnd,\n                onTouchMove,\n                id: `${carouselId}-slider-frame`,\n                \"data-testid\": `${carouselId}-slider-frame`,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(SliderList, {\n                    animationDistance,\n                    cellAlign,\n                    currentSlide,\n                    disableEdgeSwiping: props.disableEdgeSwiping,\n                    draggedOffset: preDragOffset.current - dragDistance,\n                    disableAnimation,\n                    easing: props.easing,\n                    edgeEasing: props.edgeEasing,\n                    isDragging,\n                    ref: setSliderListRef,\n                    scrollMode,\n                    animation,\n                    slideCount,\n                    slidesToScroll,\n                    slidesToShow,\n                    speed,\n                    slideWidth,\n                    wrapAround,\n                    setIsAnimating,\n                    children: [\n                        wrapAround ? renderSlides(\"prev-cloned\") : null,\n                        renderSlides(),\n                        wrapAround ? renderSlides(\"next-cloned\") : null\n                    ]\n                })\n            })\n        ]\n    });\n});\nCarousel.defaultProps = default_carousel_props_default;\nCarousel.displayName = \"Carousel\";\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nuka-carousel/dist/index.mjs\n");

/***/ })

};
;